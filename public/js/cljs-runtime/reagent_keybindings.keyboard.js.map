{"version":3,"sources":["reagent_keybindings/keyboard.cljs"],"mappings":"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","names":["reagent-keybindings.keyboard/modifiers","cljs.core.reduce","p__6284","vec__6285","cljs.core.nth","m","k","v","cljs.core.assoc","iter__4582__auto__","s__6289","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__6291","cljs.core/chunk-buffer","i__6290","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__6288","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","reagent-keybindings.keyboard/mouse-buttons","reagent-keybindings.keyboard/special-ks","reagent-keybindings.keyboard/get-keycode","key","or__4185__auto__","cljs.core.get","reagent-keybindings.keyboard/string-to-keys*","kb-string","keys","clojure.string/lower-case","clojure.string/replace","clojure.string.split","string","p1__6292#","cljs.core.map","s__6294","b__6296","i__6295","iter__6293","cljs.core._EQ_","cljs.core.into","reagent-keybindings.keyboard/string-to-keys","cljs.core/memoize","reagent-keybindings.keyboard/preventing-default-keys","cljs.core.atom","js/reagent-keybindings","js/reagent-keybindings.keyboard","js/reagent-keybindings.keyboard.keyboard-state","reagent-keybindings.keyboard/keyboard-state","reagent.core.atom","js/reagent-keybindings.keyboard.deactivate-shortcuts-comps","reagent-keybindings.keyboard/deactivate-shortcuts-comps","reagent-keybindings.keyboard/shortcuts-active?","cljs.core/not","cljs.core/deref","js/reagent-keybindings.keyboard.registered-keys","reagent-keybindings.keyboard/registered-keys","reagent-keybindings.keyboard/register-keys!","shortcut-string","id","action-fn","keys-map","cljs.core.swap_BANG_","cljs.core/update-in","action-coll","p1__6297#","cljs.core/some","cljs.core/vec","s__6299","b__6301","i__6300","iter__6298","entry","cljs.core.conj","reagent-keybindings.keyboard/deregister-keys!","p1__6302#","cljs.core.remove","reagent-keybindings.keyboard/get-keys-action","cljs.core.get_in","cljs.core/peek","reagent-keybindings.keyboard/evt-modifiers","evt","reagent-keybindings.keyboard/key-up!","keycode","mods","cljs.core/merge","reagent-keybindings.keyboard/key-down!","new-state","pressed-keys","cljs.core.filter","cljs.core/second","cljs.core/reset!","action","reagent-keybindings.keyboard/mouse-up!","button","pred__6303","expr__6304","cljs.core/=","reagent-keybindings.keyboard/mouse-down!","cljs.core.keyword","reagent-keybindings.keyboard/keyboard-listener","reagent.core/create-class","_","js/window","goog.events.EventType/KEYUP","goog.events.EventType/KEYDOWN","goog.events.EventType/MOUSEUP","goog.events.EventType/MOUSEDOWN","reagent-keybindings.keyboard/kb-action","kb-fn","cljs.core.gensym","p__6306","vec__6307","new-kb-fn","reagent-keybindings.keyboard/deactivate-kb-shortcuts","cljs.core/conj","p1__6310#","cljs.core/chunk-first"],"sourcesContent":["(ns reagent-keybindings.keyboard\n  (:require [reagent.core :as r]\n            [goog.events :as events]\n            [clojure.string :as s])\n  (:import [goog.events EventType]))\n\n\n(def modifiers\n  (reduce (fn [m [k v]]\n            (assoc m k v))\n          { \"shift\" 16\n            \"alt\" 18\n            \"option\" 18\n            \"ctrl\" 17\n            \"control\" 17\n            \"cmd\" 91\n            \"command\" 91}\n          (for [k (range 1 20)] [(str \"f\" k) (+ 111 k)])))\n\n\n;; We include the mouse buttons, but will most likely never be used.\n;; (Contrary to a keybinding, we often click directly on the item on\n;; which we want to apply an action.)\n(def mouse-buttons\n  {\"mouse0\" :m0\n   \"mouseleft\" :m0\n   \"mouse2\" :m2\n   \"mouseright\" :m2\n   \"mouse1\" :m1\n   \"mousemiddle\" :m1})\n\n\n(def special-ks\n  { \"backspace\" 8\n    \"tab\" 9\n    \"clear\" 12\n    \"enter\" 13\n    \"return\" 13\n    \"esc\" 27\n    \"escape\" 27\n    \"space\" 32\n    \"left\" 37\n    \"up\" 38\n    \"right\" 39\n    \"down\" 40\n    \"del\" 46\n    \"delete\" 46\n    \"home\" 36\n    \"end\" 35\n    \"pageup\" 33\n    \"pagedown\" 34\n    \",\" 188\n    \".\" 190\n    \"/\" 191\n    \"`\" 192\n    \"-\" 189\n    \"=\" 187,\n    \";\" 186\n    \"'\" 222\n    \"[\" 219\n    \"]\" 221\n    \"\\\\\" 220})\n\n\n(defn- get-keycode\n  \"Return the keycode (number) of the key given as a string.\"\n  [key]\n  (or (get special-ks key)\n      (get modifiers key)\n      (get mouse-buttons key)\n      (.charCodeAt (.toUpperCase key) 0)))\n;; keyCode will give us the code the for the uppercase letter\n\n\n(defn- string-to-keys*\n  \"Convert string representation of shortcuts to their map equilavent.\n\n  Modifiers are separated from the main key by a space or a dash.\n  For example : \n  \\\"ctrl-a\\\" or \\\"ctrl a\\\"\"\n  [kb-string]\n  (let [keys (-> (s/lower-case kb-string)\n                 (s/replace #\"--| -\" \"-dash\")\n                 (s/split #\" |-\")\n                 ((fn [string]\n                    (map #(s/replace % \"dash\" \"-\") string))))]\n    (->> (for [k (map get-keycode keys)]\n           (cond\n             (= 16 k) [:shift true]\n             (= 17 k) [:ctrl true]\n             (= 18 k) [:alt true]\n             :else [:keycode k]))\n         (into {}))))\n\n(def string-to-keys (memoize string-to-keys*))\n\n;;;;\n\n\n\n(def preventing-default-keys\n  \"Prevent the default action for these keys.\"\n  (atom [{:keycode 82 :ctrl true} ;; ctrl r ---> we never want our user to\n         ;; reload by accident\n         {:keycode 83 :ctrl true} ;; ctrl s ---> don't save the HTML page\n         ]))\n\n\n(defonce keyboard-state\n  (r/atom {:keycode nil\n           :shift nil\n           :ctrl nil\n           :alt nil}))\n\n\n(defonce deactivate-shortcuts-comps (atom []))\n\n\n(defn shortcuts-active?\n  \"Return true if keyboard and mouse shortcuts are active.\"\n  []\n  (not (seq @deactivate-shortcuts-comps)))\n\n\n\n(defonce registered-keys (atom {}))\n\n\n(defn register-keys!\n  \"Register a shortcut. If multiple shortcuts have the same keys,\n  only the most recently added will be active. Re-registering the same\n  keys and ID combination will update the action function without\n  changing the order.\"\n  [shortcut-string id action-fn]\n  (let [keys-map (string-to-keys shortcut-string)]\n    (swap! registered-keys update-in [keys-map]\n           (fn [action-coll]\n             (if (some #(= (:id %) id) action-coll)\n               ;; ID already registered\n               (vec (for [entry action-coll]\n                      (if (= id (:id entry))\n                        (assoc entry :action-fn action-fn)\n                        entry)))\n               ;; New ID\n               (conj (or action-coll [])\n                     {:id id\n                      :action-fn action-fn}))))))\n\n\n(defn deregister-keys! [shortcut-string id]\n  (let [keys-map (string-to-keys shortcut-string)]\n    (swap! registered-keys update-in [keys-map]\n           (fn [action-coll]\n             (vec (remove #(= (:id %) id) action-coll))))))\n\n\n(defn get-keys-action\n  \"Return the keys action, if any.\"\n  [keys-map]\n  (when (shortcuts-active?)\n    (-> (get-in @registered-keys [keys-map])\n        (peek)\n        :action-fn)))\n\n\n(defn evt-modifiers\n  \"Return the keyboard modifiers associated with this event.\"\n  [evt]\n  {:shift (.-shiftKey evt)\n   :ctrl (.-ctrlKey evt)\n   :alt (.-altKey evt)})\n\n(defn key-up! [evt]\n  (let [keycode (.-keyCode evt)\n        mods (evt-modifiers evt)]\n    (swap! keyboard-state merge mods\n           (when (= keycode (:keycode @keyboard-state))\n             {:keycode nil}))))\n\n\n(defn key-down! [evt]\n  (let [keycode (.-keyCode evt)\n        mods (evt-modifiers evt)\n        new-state (assoc mods :keycode keycode)\n        pressed-keys (into {} (filter second new-state))]\n    (reset! keyboard-state new-state)\n    (when-let [action (get-keys-action pressed-keys)]\n      (action evt)\n      (.preventDefault evt))\n    ;; maybe prevent default action\n    (when (some #{pressed-keys} @preventing-default-keys)\n      (.preventDefault evt))))\n\n\n(defn mouse-up! [evt]\n  (let [button (.-button evt)\n        keycode (condp = button\n                  0 :m0\n                  1 :m1\n                  2 :m2\n                  nil)\n        mods (evt-modifiers evt)]\n    (swap! keyboard-state merge mods\n           (when (= keycode (:keycode @keyboard-state))\n             {:keycode nil}))))\n\n\n(defn mouse-down! [evt]\n  (let [button (.-button evt)\n        keycode (keyword (str \"m\" button))\n        mods (evt-modifiers evt)\n        new-state (assoc mods :keycode keycode)\n        pressed-keys (into {} (filter second new-state))]\n    (reset! keyboard-state new-state)\n    (when-let [action (get-keys-action pressed-keys)]\n      (action evt)\n      (.preventDefault evt)\n      (.stopPropagation evt))))\n\n\n\n\n\n\n;;; API\n\n(defn keyboard-listener\n  \"Component that will add the necessary events listeners to the\n  window.\"\n  []\n  (r/create-class\n   {:component-did-mount (fn [_]\n                           (.addEventListener js/window EventType.KEYUP key-up!)\n                           (.addEventListener js/window EventType.KEYDOWN key-down!)\n                           (.addEventListener js/window EventType.MOUSEUP mouse-up!)\n                           (.addEventListener js/window EventType.MOUSEDOWN mouse-down!))\n    :component-will-unmount (fn [_]\n                              (.removeEventListener js/window EventType.KEYUP key-up!)\n                              (.removeEventListener js/window EventType.KEYDOWN key-down!)\n                              (.removeEventListener js/window EventType.MOUSEUP mouse-up!)\n                              (.removeEventListener js/window EventType.MOUSEDOWN mouse-down!))\n    :reagent-render (fn [] [:span])}))\n\n\n(defn kb-action\n  \"Component to register a shortcut. If multiple shortcuts have the same keys,\n  only the most recently added will be active. Re-registering the same\n  keys and ID combination will update the action function without\n  changing the order.\n\n  Modifiers in `shortcut-string` are separated from the main key by a space or a dash.\n  For example : \n  \\\"ctrl-a\\\" or \\\"ctrl a\\\"\n\n  The `keyboard-listener` component must be mounted somewhere in order\n  for the shortcuts to be activated.\"\n  ([shortcut-string kb-fn]\n   (let [id (gensym \"kb-\")]\n     (r/create-class\n      {:component-did-mount (fn [_]\n                              (register-keys! shortcut-string id kb-fn))\n       :component-did-update (fn [_ [_ _ new-kb-fn]]\n                               (when-not (= kb-fn new-kb-fn)\n                                 (register-keys! shortcut-string id kb-fn)))\n       :component-will-unmount (fn [_]\n                                 (deregister-keys! shortcut-string id))\n       :reagent-render (fn [_] [:span])}))))\n\n(defn deactivate-kb-shortcuts\n  \"While mounted, kb shortcuts are completely deactivated.\n  Useful when showing a form in a modal. (We wouldn't want the user to\n  activate shortcuts while typing in some text field.)\"\n  ([]\n   (let [id (gensym \"deactivate-shortcuts-\")]\n     (r/create-class\n      {:component-did-mount (fn [_]\n                              (swap! deactivate-shortcuts-comps conj id))\n       :component-will-unmount (fn [_]\n                                 (swap! deactivate-shortcuts-comps #(remove #{id} %)))\n       :reagent-render (fn [_] [:span])}))))\n"]}