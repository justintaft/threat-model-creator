{"version":3,"sources":["cljs/threatmodeler/core.cljs"],"mappings":"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","names":["threatmodeler.core/threat-model","reagent.core.atom","js/threatmodeler","js/threatmodeler.core","js/threatmodeler.core.timer","threatmodeler.core/timer","js/Date","js/threatmodeler.core.time-color","threatmodeler.core/time-color","js/threatmodeler.core.time-updater","threatmodeler.core/time-updater","js/setInterval","cljs.core/reset!","threatmodeler.core/clock","cljs.core/deref","time-str","clojure.string.split","cljs.core/first","p1__10422#","threatmodeler.core/color-input","threatmodeler.core/draggable","reagent.core/adapt-react-class","js/ReactDraggable","threatmodeler.core/calculate-line-points","element1","element2","p__10481","map__10482","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","threatmodeler.core/render-line","x1","y1","x2","y2","style","line","lineLength","js/Math.sqrt","js/Math.pow","slope","rotationDegree","js/Math.PI","js/Math.atan","or__4185__auto__","js/console.log","js/goog.string.format","threatmodeler.core/diagram-event-element-drag-stop","id","event","data","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/merge","p__10490","map__10491","threatmodeler.core/render-threat-model-element-common","x","y","type","name","cljs.core.partial","cljs.core/name","threatmodeler.core/render-threat-model-element-communication","element","elements","threatmodeler.core/render-threat-model-element-boundary","cljs.core.merge","js/threatmodeler.core.render-threat-model-element","method-table__4672__auto__","cljs.core.atom","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","fexpr__10496","cljs.core/MultiFn","cljs.core.symbol","threatmodeler.core/render-threat-model-element","_","threatmodeler.core/add-element!","cljs.core/random-uuid","element-data","cljs.core/assoc-in","threatmodeler.core/toolbar","threatmodeler.core/simple-example","threat-model","iter__4582__auto__","s__10511","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__10513","cljs.core/chunk-buffer","i__10512","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__10510","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cljs.core/vals","threatmodeler.core/init!","reagent.dom.render","js/document.getElementById","cljs.core/chunk-first"],"sourcesContent":["(ns threatmodeler.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]\n            [react-draggable]\n            [goog.string.format]\n            [react-moveable :as Moveable]\n            [cljs.test :refer-macros [deftest is testing]]))\n\n(def threat-model (r/atom { :elements { 1 {:type :actor :name \"hackerman\" :x 50 :y 50 :width 100 :height 50 :id 1}\n                                       2 {:type :process :name \"webapp\" :id 2 :x 400 :y 100 :width 100 :height 100}\n                                       3 {:type :datastore :name \"datastore\" :id 3 :x 100 :y 400 :width 100 :height 50}\n                                       4 {:type :communication :from 1 :to 2}\n                                       5 {:type :communication :from 1 :to 3}\n                                       6 {:type :boundary :x1 100 :y1 200 :x2 100 :y2 300}}\n                           :threats []}))\n\n\n(defonce timer (r/atom (js/Date.)))\n\n(defonce time-color (r/atom \"#f34\"))\n\n(defonce time-updater (js/setInterval\n                       #(reset! timer (js/Date.)) 1000))\n\n\n(defn clock []\n  (let [time-str (-> @timer .toTimeString (str/split \" \") first)]\n    [:div.example-clock\n     {:style {:color @time-color}}\n     time-str]))\n\n(defn color-input []\n  [:div.color-input\n   \"Time color: \"\n   [:input {:type \"text\"\n            :value @time-color\n            :on-change #(reset! time-color (-> % .-target .-value))}]])\n\n;(js/console.log \"Moveable\" Moveable)\n;(def moveable (r/adapt-react-class Moveable))\n(def draggable (r/adapt-react-class js/ReactDraggable))\n\n(defn calculate-line-points [element1 element2]\n  \"Find best line between two elements, and return points.\"\n\n  (cond\n    ;left of second element\n    (< (+ (:x element1) (:width element1)) (:x element2))\n    {:x1 (+ (:x element1) (:width element1))\n     :y1 (+ (:y element1) (/ (:height element1) 2))\n     :x2 (:x element2)\n     :y2 (+ (:y element2) (/ (:height element2) 2))}\n\n    ;to right of second element\n    (> (:x element1) (+ (:x element2) (:width element2)))\n    {:x1 (+ (:x element2) (:width element2))\n     :y1 (+ (:y element2) (/ (:height element2) 2))\n     :x2 (:x element1)\n     :y2 (+ (:y element1) (/ (:height element1) 2))}\n\n\n    ;above second element\n    (< (:y element1) (:y element2))\n    {:x1 (+ (:x element1) (/ (:width element1) 2))\n     :y1 (+ (:y element1) (:height element1))\n     :x2 (+ (:x element2) (/ (:width element2) 2))\n     :y2 (:y element2)}\n\n\n    ;below second elements\n    true\n    {:x1 (+ (:x element2) (/ (:width element2) 2))\n     :y1 (+ (:y element2) (:height element2))\n     :x2 (+ (:x element1) (/ (:width element1) 2))\n     :y2 (:y element1)}))\n\n    \n\n\n                                            \n\n\n\n(defn render-line [ {:keys [x1 y1 x2 y2 style] :as line}]\n  (let [lineLength (js/Math.sqrt (+ (js/Math.pow (- x2 x1) 2)\n                                    (js/Math.pow (- y2 y1) 2)))\n\n        slope (/ (- y1 y2) (- x1 x2))\n\n\n        ;We have to do some funky math to rotations, as Y is inverted on screen\n        ;(higher Y cord is lowe ron screen...)\n        rotationDegree (if (and (>= x1 x2)\n                                (< y1 y2))\n                         (- js/Math.PI   (* -1 (js/Math.atan slope)))\n                         (js/Math.atan slope))\n        style (or style \"solid\")]\n        \n\n    (js/console.log rotationDegree) \n\n    [(if (:draggable line) draggable :span) [:div.line.diagram-threat-model-element {:style {:height \"2px\"\n                                                                                             :width (goog.string.format \"%dpx\" lineLength)\n                                                                                             :border-top (goog.string.format \"2px %s black\" style)\n                                                                                             :transform (goog.string.format \"translate(%dpx,%dpx) rotate(%frad)\" x1 y1 rotationDegree)\n                                                                                             :transform-origin \"center left\"\n                                                                                             :padding (if (:draggable line) \"5px\" \"0\")}} \"hm\"]]))\n\n                                                                                     \n     \n\n(defn diagram-event-element-drag-stop [id event data]\n  \"Persist position of dragged threat model diagram element to local state.\"\n  (swap! threat-model update-in [:elements id] merge {:x (-> data .-lastX) :y (-> data .-lastY)}))\n\n\n(defn render-threat-model-element-common [{:keys [x y type name id]}]\n  [draggable {:grid [25 25]\n              :defaultPosition {:x x :y y}\n              :onStop (partial diagram-event-element-drag-stop id)}\n   [:span.diagram-threat-model-element {:class (str \"diagram-\" (cljs.core/name type))\n                                        :style {:transform (goog.string.format \"translate(%dpx,%dpx)\" x y)}}\n    [:p name]]])\n\n\n(defn render-threat-model-element-communication [element elements]\n  [render-line (calculate-line-points (get elements (:from element)) (get elements (:to element)))])\n\n(defn render-threat-model-element-boundary [element elements]\n  [render-line (merge element {:style \"dashed\" :draggable true})])\n\n(defmulti render-threat-model-element (fn [element _] (:type element)))\n(defmethod render-threat-model-element :actor [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :process [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :datastore [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :communication [element elements] (render-threat-model-element-communication element elements))\n(defmethod render-threat-model-element :boundary [element elements] (render-threat-model-element-boundary element elements))\n\n\n(defn add-element! [data]\n  \"Adds element to threat model.\"\n  (let [id (random-uuid)\n        element-data (merge {:id id\n                             :type (:type data)\n                             :name \"TODO\"}\n                            data)]\n    (swap! threat-model assoc-in [:elements id] element-data)))\n      \n\n\n(defn toolbar []\n  [:div\n   [:button {:on-click (partial add-element! {:type :actor :width 100 :height 50 :x 100 :y 100})} \"Add Actor\"]\n   [:button {:on-click (partial add-element! {:type :process :width 100 :height 100 :x 100 :y 100 })} \"Add Process\"]\n   [:button {:on-click (partial add-element! {:type :datastore :width 100 :height 50 :x 100 :y 100})} \"Add Datastore\"]\n   [:button {:on-click (partial add-element! {:type :boundary :x1 100 :y1 100 :x2 200 :y2 200})} \"Add Trust Boundary\"]])\n    \n    \n(defn simple-example [threat-model]\n  [:div\n   [toolbar]\n   (for [element (vals (:elements @threat-model))]\n     (render-threat-model-element element (:elements @threat-model)))\n   [clock]\n   [color-input]])\n\n\n(defn ^:export init! [])\n(rdom/render [simple-example threat-model] (js/document.getElementById \"app\"))\n\n"]}