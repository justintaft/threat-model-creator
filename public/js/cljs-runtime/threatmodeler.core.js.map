{"version":3,"sources":["threatmodeler/core.cljs"],"mappings":"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","names":["threatmodeler.core/threat-model","reagent.core.atom","threatmodeler.core/html-element->element-id","element","threatmodeler.core/ui-state","threatmodeler.core/set-active-moveable-element!","id","e","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","threatmodeler.core/moveable","reagent.core/adapt-react-class","js/module$node_modules$react_moveable$dist$moveable_cjs","threatmodeler.core/calculate-line-points","element1","element2","p__41611","map__41612","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","threatmodeler.core/render-line","x1","y1","x2","y2","style","line","lineLength","js/Math.sqrt","js/Math.pow","slope","rotationDegree","js/Math.PI","js/Math.atan","or__4185__auto__","js/console.log","js/goog.string.format","cljs.core.partial","threatmodeler.core/get-closest-html-element","selector","threatmodeler.core/diagram-element-event-on-mouse-up!","map__41614","last-item-shift-clicked","js/alert","p__41616","map__41617","threatmodeler.core/render-threat-model-element-common","x","y","type","name","cljs.core/name","threatmodeler.core/render-threat-model-element-communication","elements","cljs.core.merge","cljs.core/select-keys","threatmodeler.core/render-threat-model-element-boundary","js/threatmodeler","js/threatmodeler.core","js/threatmodeler.core.render-threat-model-element","method-table__4672__auto__","cljs.core.atom","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","fexpr__41619","cljs.core/MultiFn","cljs.core.symbol","threatmodeler.core/render-threat-model-element","_","threatmodeler.core/add-element!","data","cljs.core/random-uuid","element-data","cljs.core/assoc-in","threatmodeler.core/toolbar","threatmodeler.core/diagram-event-element-drag-stop","event","cljs.core/update-in","cljs.core/merge","threatmodeler.core/last-element-dragged","threatmodeler.core/moveable-drag-end!","dragged-values","cur-val","threatmodeler.core/moveable-drag-start!","element-id","cur-element-info","cljs.core.get_in","threatmodeler.core/moveable-drag-on!","last-element-dragged-deref","newX","cljs.core.nth","newY","threatmodeler.core/simple-example","threat-model","cljs.core.doall","iter__4582__auto__","s__41621","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__41623","cljs.core/chunk-buffer","i__41622","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41620","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/vals","js/document.querySelector","threatmodeler.core/main!","reagent.dom.render","js/document.getElementById","cljs.core/chunk-first"],"sourcesContent":["(ns threatmodeler.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]\n            [goog.string.format]\n            [react-moveable :as Moveable]\n            [cljs.test :refer-macros [deftest is testing]]))\n\n(def threat-model (r/atom { :elements { \"1\" {:type :actor :name \"hackerman\" :x 50 :y 50 :width 100 :height 50 :id \"1\"}\n                                        \"2\" {:type :process :name \"webapp\" :id \"2\" :x 400 :y 100 :width 100 :height 100}\n                                        \"3\" {:type :datastore :name \"datastore\" :id \"3\" :x 100 :y 400 :width 100 :height 50}\n                                        \"4\" {:type :communication :from \"1\" :to \"2\" :id \"4\"}\n                                        \"5\" {:type :communication :from \"1\" :to \"3\" :id \"5\"}\n                                        \"6\" {:type :boundary :x 100 :y 100 :width 100 :height 20 :id \"6\"}}\n                           :threats []}))\n\n\n\n(defn html-element->element-id [element]\n  (-> element .-dataset .-elementId))\n\n(def ui-state (r/atom {:active-moveable-id nil\n                       :currently-dragged-element-id nil\n                       :last-element-dragged nil\n                       :last-item-shift-clicked nil}))\n(defn set-active-moveable-element! [id e]\n  (when-not (:currently-dragged-element-id @ui-state)\n    (swap! ui-state assoc :active-moveable-id id)))\n\n\n(def moveable (r/adapt-react-class Moveable))\n\n(defn calculate-line-points [element1 element2]\n  \"Find best line between two elements, and return points.\"\n\n  (cond\n    ;left of second element\n    (< (+ (:x element1) (:width element1)) (:x element2))\n    {:x1 (+ (:x element1) (:width element1))\n     :y1 (+ (:y element1) (/ (:height element1) 2))\n     :x2 (:x element2)\n     :y2 (+ (:y element2) (/ (:height element2) 2))}\n\n    ;to right of second element\n    (> (:x element1) (+ (:x element2) (:width element2)))\n    {:x1 (+ (:x element2) (:width element2))\n     :y1 (+ (:y element2) (/ (:height element2) 2))\n     :x2 (:x element1)\n     :y2 (+ (:y element1) (/ (:height element1) 2))}\n\n\n    ;above second element\n    (< (:y element1) (:y element2))\n    {:x1 (+ (:x element1) (/ (:width element1) 2))\n     :y1 (+ (:y element1) (:height element1))\n     :x2 (+ (:x element2) (/ (:width element2) 2))\n     :y2 (:y element2)}\n\n\n    ;below second elements\n    true\n    {:x1 (+ (:x element2) (/ (:width element2) 2))\n     :y1 (+ (:y element2) (:height element2))\n     :x2 (+ (:x element1) (/ (:width element1) 2))\n     :y2 (:y element1)}))\n\n    \n\n\n                                            \n\n\n\n(defn render-line [ {:keys [x1 y1 x2 y2 style id] :as line}]\n  (let [lineLength (js/Math.sqrt (+ (js/Math.pow (- x2 x1) 2)\n                                    (js/Math.pow (- y2 y1) 2)))\n\n        slope (/ (- y1 y2) (- x1 x2))\n\n\n        ;We have to do some funky math to rotations, as Y is inverted on screen\n        ;(higher Y cord is lowe ron screen...)\n        rotationDegree (if (and (>= x1 x2)\n                                (< y1 y2))\n                         (- js/Math.PI   (* -1 (js/Math.atan slope)))\n                         (js/Math.atan slope))\n        style (or style \"solid\")]\n        \n\n    (js/console.log rotationDegree) \n\n    [:div.line.diagram-threat-model-element {:style {:height \"2px\"\n                                                     :width (goog.string.format \"%dpx\" lineLength)\n                                                     :border-top (goog.string.format \"2px %s black\" style)\n                                                     :transform (goog.string.format \"translate(%dpx,%dpx) rotate(%frad)\" x1 y1 rotationDegree)\n                                                     :transform-origin \"center left\"\n                                                     :padding (if (:draggable line) \"5px\" \"0\")}\n                                             :class (str \"moveable-element-\" id)\n                                             :on-mouse-over (partial set-active-moveable-element! id)}\n     \n      \"hm\"]))\n\n\n(defn get-closest-html-element \n  \"Given a HTML element and selector, find the closest node to it.\n   If the selector matches the given node, return the curret node.\"\n  [element selector]\n  (.closest element selector))\n\n(defn diagram-element-event-on-mouse-up! \n  \"Handles on mouse up event for diagram elements.\n   Used to connect diagram elements together when shift key is \n   held while click is released.\"\n\n  [e]\n  (js/console.log (html-element->element-id (get-closest-html-element (-> e .-target) \".diagram-threat-model-element\")))\n  (when e.shiftKey\n    (let [{:keys [last-item-shift-clicked]} @ui-state]\n      (if last-item-shift-clicked\n        (js/alert \"got a click!\")\n        (js/alert \"new click!\")))))\n ;(swap! ui-state assoc :last-element-clicked ()))\n\n\n(defn render-threat-model-element-common [{:keys [x y type name id]}]\n   [:span.diagram-threat-model-element {:class (str \"diagram-\" (cljs.core/name type)\n                                                    \" moveable-element-\" id)\n                                        :style {:transform (goog.string.format \"translate(%dpx,%dpx)\" x y)}\n                                        :data-element-id id\n                                        :on-mouse-up diagram-element-event-on-mouse-up!\n                                        :on-mouse-over (partial set-active-moveable-element! id)}\n    [:p name]])\n\n\n(defn render-threat-model-element-communication [element elements]\n  [render-line (merge (select-keys element [:id]) (calculate-line-points (get elements (:from element)) (get elements (:to element))))])\n\n(defn render-threat-model-element-boundary [element elements]\n  [render-line (merge element {:style \"dashed\" :draggable true})])\n\n(defmulti render-threat-model-element (fn [element _] (:type element)))\n(defmethod render-threat-model-element :actor [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :process [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :datastore [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :communication [element elements] (render-threat-model-element-communication element elements))\n(defmethod render-threat-model-element :boundary [element ] (render-threat-model-element-common element))\n\n\n(defn add-element! [data]\n  \"Adds element to threat model.\"\n  (let [id (str (random-uuid))\n        element-data (merge {:id id\n                             :type (:type data)\n                             :name \"TODO\"}\n                            data)]\n    (swap! threat-model assoc-in [:elements id] element-data)))\n      \n\n\n(defn toolbar []\n  [:div\n   [:button {:on-click (partial add-element! {:type :actor :width 100 :height 50 :x 100 :y 100})} \"Add Actor\"]\n   [:button {:on-click (partial add-element! {:type :process :width 100 :height 100 :x 100 :y 300 })} \"Add Process\"]\n   [:button {:on-click (partial add-element! {:type :datastore :width 100 :height 50 :x 100 :y 100})} \"Add Datastore\"]\n   [:button {:on-click (partial add-element! {:type :boundary :x 100 :y 100 :width 100 :height 20})} \"Add Trust Boundary\"]])\n    \n(defn diagram-event-element-drag-stop [id event data]\n  \"Persist position of dragged threat model diagram element to local state.\"\n  (swap! threat-model update-in [:elements id] merge {:x (-> data .-lastX) :y (-> data .-lastY)}))\n\n    \n\n(def last-element-dragged (atom {}))\n\n(defn moveable-drag-end! []\n  (let [dragged-values @ui-state]\n    (swap! threat-model\n           update-in\n           [:elements (:currently-dragged-element-id dragged-values)]\n           (fn [cur-val]\n             (js/console.log \"vals\" cur-val)\n             (merge cur-val dragged-values))))\n  (swap! ui-state assoc :currently-dragged-element-id nil))\n\n\n\n(defn moveable-drag-start! [event]\n  (let [element-id (html-element->element-id (-> event .-target))\n        cur-element-info (get-in @threat-model [:elements element-id])]\n    (swap! ui-state\n           merge\n           {:currently-dragged-element-id element-id}\n           (select-keys cur-element-info [:x :y]))))\n\n(defn moveable-drag-on! [event]\n  (js/console.log event)\n  (let [last-element-dragged-deref @ui-state\n        newX (+ (:x last-element-dragged-deref) (nth (-> event .-delta) 0))\n        newY (+ (:y last-element-dragged-deref) (nth (-> event .-delta) 1))\n        element-id (:currently-dragged-element-id last-element-dragged-deref)]\n    (swap! ui-state merge {:x newX :y newY})\n    (set! (-> event .-target .-style .-transform) (goog.string.format \"translate(%dpx,%dpx)\" newX newY))))\n\n(defn simple-example [threat-model]\n  [:div\n   [toolbar]\n\n   ;Doall is required here, as for generates lazy sequence, and \n   ;derefs in child components won't trigget updates. known reagent issue.\n   (doall (for [element (vals (:elements @threat-model))]\n            (render-threat-model-element element (:elements @threat-model))))\n   [moveable {:target (js/document.querySelector (str \".moveable-element-\" (-> @ui-state :active-moveable-id)))\n              :draggable true\n              ;Drag x and y in steps of 25 points\n              :throttleDrag 25 \n              :throttleDragRotate 0\n              :onDragStart moveable-drag-start!\n              :onDrag moveable-drag-on! \n              :snappable true\n              :onDragEnd moveable-drag-end!}]])\n                                                          \n                           \n\n\n(defn ^:export main! [])\n\n(rdom/render [simple-example threat-model] (js/document.getElementById \"app\"))\n\n\n"]}