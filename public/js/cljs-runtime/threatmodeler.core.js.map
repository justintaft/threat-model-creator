{"version":3,"sources":["threatmodeler/core.cljs"],"mappings":"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","names":["threatmodeler.core/html-element->element-id","element","threatmodeler.core/app-state","reagent.core.atom","threatmodeler.core/ui-state","reagent.core/cursor","threatmodeler.core/threat-model","js/threatmodeler","js/threatmodeler.core","js/threatmodeler.core.create-element","method-table__4672__auto__","cljs.core.atom","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get","fexpr__28553","cljs.core/MultiFn","cljs.core.symbol","threatmodeler.core/create-element","d","cljs.core.merge","cljs.core/random-uuid","threatmodeler.core/add-element","app-state","data","cljs.core/assoc-in","threatmodeler.core/add-element!","cljs.core.swap_BANG_","threatmodeler.core/filter-elements-referencing-element-id","element-id","cljs.core/contains?","cljs.core/set","cljs.core/vals","cljs.core/select-keys","threatmodeler.core/delete-element-and-communications","referencing-elements","cljs.core.filter","cljs.core.partial","referencing-element-ids","cljs.core.map","cljs.core.update_in","x","cljs.core.apply","cljs.core/dissoc","js/threatmodeler.core.delete-element","fexpr__28554","threatmodeler.core/delete-element","threatmodeler.core/set-active-moveable-element!","id","e","cljs.core/deref","cljs.core/assoc","threatmodeler.core/moveable","reagent.core/adapt-react-class","js/module$node_modules$react_moveable$dist$moveable_cjs","threatmodeler.core/calculate-line-points","element1","element2","p__28555","map__28556","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","threatmodeler.core/render-line","x1","y1","x2","y2","style","line","lineLength","js/Math.sqrt","js/Math.pow","slope","rotationDegree","js/Math.PI","js/Math.atan","or__4185__auto__","js/goog.string.format","threatmodeler.core/get-closest-html-element","selector","threatmodeler.core/diagram-element-event-on-mouse-up!","state","last-item-shift-clicked","p__28558","map__28559","threatmodeler.core/render-threat-model-element-common","y","type","name","cljs.core/name","threatmodeler.core/handle-backspace-pressed!","temp__5735__auto__","current-element-id","cljs.core.get_in","current-element","threatmodeler.core/render-threat-model-element-communication","elements","threatmodeler.core/render-threat-model-element-boundary","js/threatmodeler.core.render-threat-model-element","fexpr__28561","threatmodeler.core/render-threat-model-element","_","threatmodeler.core/toolbar","threatmodeler.core/diagram-event-element-drag-stop","event","cljs.core/update-in","cljs.core/merge","threatmodeler.core/last-element-dragged","threatmodeler.core/moveable-drag-end!","dragged-values","cur-val","threatmodeler.core/moveable-drag-start!","cur-element-info","threatmodeler.core/moveable-drag-on!","last-element-dragged-deref","newX","cljs.core.nth","newY","threatmodeler.core/instructions","threatmodeler.core/simple-example","threat-model","cljs.core.doall","iter__4582__auto__","s__28563","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__28565","cljs.core/chunk-buffer","i__28564","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28562","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","js/document.querySelector","reagent-keybindings.keyboard/keyboard-listener","reagent-keybindings.keyboard/kb-action","threatmodeler.core/main!","reagent.dom.render","js/document.getElementById","cljs.core/chunk-first"],"sourcesContent":["(ns threatmodeler.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [clojure.string :as str]\n            [goog.string.format]\n            [react-moveable :as Moveable]\n            [cljs.test :refer-macros [deftest is testing]]\n            [reagent-keybindings.keyboard :as kb]))\n\n(defn html-element->element-id [element]\n  (-> element .-dataset .-elementId))\n\n(def app-state (r/atom {:ui-state {:active-moveable-id nil\n                                   :currently-dragged-element-id nil\n                                   :last-element-dragged nil\n                                   :last-item-shift-clicked nil}\n                        :threat-model {:elements {} :threats []}}))\n\n(def ui-state (r/cursor app-state [:ui-state]))\n(def threat-model (r/cursor app-state [:threat-model]))\n\n\n;TODO add validation to ensure only valid properties are provided\n(defmulti create-element :type)\n(defmethod create-element :actor          [d] (merge {:id (str (random-uuid)) :name \"TODO\" :width 100 :height 50 :x 100 :y 100} d))\n(defmethod create-element :process        [d] (merge {:id (str (random-uuid)) :name \"TODO\" :width 100 :height 100 :x 100 :y 100} d))\n(defmethod create-element :datastore      [d] (merge {:id (str (random-uuid)) :name \"TODO\" :width 100 :height 50 :x 100 :y 100} d))\n(defmethod create-element :boundary       [d] (merge {:id (str (random-uuid)) :width 100 :height 20 :x 100 :y 100} d))\n(defmethod create-element :communication  [d] (merge {:id (str (random-uuid))} d))\n\n\n(defn add-element [app-state data]\n  \"Add an element to the given app state.\"\n  (let [element (create-element data)]\n    (assoc-in app-state [:threat-model :elements (:id element)] element)))\n\n(defn add-element! \n  \"Adds element to threat model, and udpates corresponding atom.\"\n  [data]\n  (let [element (create-element data)]\n    (swap! app-state add-element data)))\n\n\n(defn filter-elements-referencing-element-id [element-id element]\n  \"Return elements which directly references element.\"\n  (contains? (set (vals (select-keys element [:to :from :id]))) element-id ))\n\n(defn delete-element-and-communications\n  \"Deletes element from threat model, and any communications referencing it\"\n  [app-state element]\n  (let [referencing-elements (filter (partial filter-elements-referencing-element-id (:id element)) (-> app-state :threat-model :elements (vals)))\n        referencing-element-ids (map :id referencing-elements)]\n    (update-in app-state [:threat-model :elements] (fn [x] (apply dissoc x app-state referencing-element-ids)))))\n(defmulti delete-element (fn [app-state element] (:type element)))\n(defmethod delete-element :communication [app-state element] (update-in app-state [:threat-model :elements] dissoc (:id element)))\n(defmethod delete-element :default [app-state element] (delete-element-and-communications app-state element))\n             \n\n;Populate threat model with example data\n(add-element! (create-element {:type :actor         :name \"hackerman\" :x 50  :y 150 :id \"hackerman1\"}))\n(add-element! (create-element {:type :process       :name \"webapp\"    :x 400 :y 125 :id \"webapp1\"}))\n(add-element! (create-element {:type :datastore     :name \"database\"  :x 50  :y 300 :id \"datastore1\"}))\n(add-element! (create-element {:type :communication :from \"hackerman1\" :to \"webapp1\"}))\n(add-element! (create-element {:type :communication :from \"hackerman1\" :to \"datastore1\"}))\n(add-element! (create-element {:type :boundary}))\n\n\n(defn set-active-moveable-element! [id e]\n(when-not (:currently-dragged-element-id @ui-state)\n  (swap! ui-state assoc :active-moveable-id id)))\n\n\n(def moveable (r/adapt-react-class Moveable))\n\n(defn calculate-line-points [element1 element2]\n\"Find best line between two elements, and return points.\"\n\n(cond\n                                        ;left of second element\n  (< (+ (:x element1) (:width element1)) (:x element2))\n  {:x1 (+ (:x element1) (:width element1))\n   :y1 (+ (:y element1) (/ (:height element1) 2))\n   :x2 (:x element2)\n   :y2 (+ (:y element2) (/ (:height element2) 2))}\n\n                                        ;to right of second element\n  (> (:x element1) (+ (:x element2) (:width element2)))\n  {:x1 (+ (:x element2) (:width element2))\n   :y1 (+ (:y element2) (/ (:height element2) 2))\n   :x2 (:x element1)\n   :y2 (+ (:y element1) (/ (:height element1) 2))}\n\n\n                                        ;above second element\n  (< (:y element1) (:y element2))\n  {:x1 (+ (:x element1) (/ (:width element1) 2))\n   :y1 (+ (:y element1) (:height element1))\n   :x2 (+ (:x element2) (/ (:width element2) 2))\n   :y2 (:y element2)}\n\n\n                                        ;below second elements\n  true\n  {:x1 (+ (:x element2) (/ (:width element2) 2))\n   :y1 (+ (:y element2) (:height element2))\n   :x2 (+ (:x element1) (/ (:width element1) 2))\n   :y2 (:y element1)}))\n\n\n\n\n\n\n\n\n(defn render-line [ {:keys [x1 y1 x2 y2 style id] :as line}]\n(let [lineLength (js/Math.sqrt (+ (js/Math.pow (- x2 x1) 2)\n                                  (js/Math.pow (- y2 y1) 2)))\n\n      slope (/ (- y1 y2) (- x1 x2))\n\n\n                                        ;We have to do some funky math to rotations, as Y is inverted on screen\n                                        ;(higher Y cord is lowe ron screen...)\n      rotationDegree (if (and (>= x1 x2)\n                              (< y1 y2))\n                       (- js/Math.PI   (* -1 (js/Math.atan slope)))\n                       (js/Math.atan slope))\n      style (or style \"solid\")]\n  \n\n  [:div.line.diagram-threat-model-element {:style {:height \"2px\"\n                                                   :width (goog.string.format \"%dpx\" lineLength)\n                                                   :border-top (goog.string.format \"2px %s black\" style)\n                                                   :transform (goog.string.format \"translate(%dpx,%dpx) rotate(%frad)\" x1 y1 rotationDegree)\n                                                   :transform-origin \"center left\"\n                                                   :padding (if (:draggable line) \"5px\" \"0\")}\n                                           :class (str \"moveable-element-\" id)\n                                           :on-mouse-over (partial set-active-moveable-element! id)}\n   \n   \"hm\"]))\n\n\n(defn get-closest-html-element \n  \"Given a HTML element and selector, find the closest node to it.\n   If the selector matches the given node, return the curret node.\"\n  [element selector]\n  (.closest element selector))\n\n(defn diagram-element-event-on-mouse-up! \n  \"Handles on mouse up event for diagram elements.\n   Used to connect diagram elements together when shift key is \n   held while clicking elements.\"\n\n  [element-id e]\n  (when e.shiftKey\n    (swap! app-state\n           (fn [state]\n             (let [last-item-shift-clicked (-> state :ui-state :last-item-shift-clicked)]\n\n               ;When we have a item we previously shift-clicked, connect the elements together\n               ;and forger the last element clicked\n               (if last-item-shift-clicked\n                 (-> (add-element state {:type :communication :from last-item-shift-clicked :to element-id})\n                     (assoc-in [:ui-state :last-item-shift-clicked] nil))\n\n                                        ;If we haven't previously shift-clicked an item, just remember it\n                 (assoc-in state [:ui-state :last-item-shift-clicked] element-id)))))))\n\n\n(defn render-threat-model-element-common [{:keys [x y type name id]}]\n  [:span.diagram-threat-model-element {:class (str \"diagram-\" (cljs.core/name type)\n                                                   \" moveable-element-\" id)\n                                       :style {:transform (goog.string.format \"translate(%dpx,%dpx)\" x y)}\n                                       :data-element-id id\n                                       :on-mouse-up (partial diagram-element-event-on-mouse-up! id)\n                                       :on-mouse-over (partial set-active-moveable-element! id)}\n   [:p name]])\n\n\n(defn handle-backspace-pressed! []\n  \"Handles backspace key event. Causes element to be deleted.\"\n  (when-let [current-element-id (get-in @app-state [:ui-state :active-moveable-id])]\n    (when-let [current-element (get-in @app-state [:threat-model :elements current-element-id])]\n      (swap! app-state delete-element current-element))))\n\n(defn render-threat-model-element-communication [element elements]\n  [render-line (merge (select-keys element [:id]) (calculate-line-points (get elements (:from element)) (get elements (:to element))))])\n\n(defn render-threat-model-element-boundary [element elements]\n  [render-line (merge element {:style \"dashed\" :draggable true})])\n\n(defmulti render-threat-model-element (fn [element _] (:type element)))\n(defmethod render-threat-model-element :actor [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :process [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :datastore [element] (render-threat-model-element-common element))\n(defmethod render-threat-model-element :communication [element elements] (render-threat-model-element-communication element elements))\n(defmethod render-threat-model-element :boundary [element ] (render-threat-model-element-common element))\n\n\n(defn toolbar []\n  [:div\n   [:button {:on-click #(add-element! (create-element {:type :actor :x 100 :y 100}))} \"Add Actor\"]\n   [:button {:on-click #(add-element! (create-element {:type :process :x 100 :y 300 }))} \"Add Process\"]\n   [:button {:on-click #(add-element! (create-element {:type :datastore :x 100 :y 100}))} \"Add Datastore\"]\n   [:button {:on-click #(add-element! (create-element {:type :boundary :x 100 :y 100 }))} \"Add Trust Boundary\"]])\n\n(defn diagram-event-element-drag-stop [id event data]\n  \"Persist position of dragged threat model diagram element to local state.\"\n  (swap! threat-model update-in [:elements id] merge {:x (-> data .-lastX) :y (-> data .-lastY)}))\n\n\n\n(def last-element-dragged (atom {}))\n\n(defn moveable-drag-end! []\n  (let [dragged-values @ui-state]\n    (swap! threat-model\n           update-in\n           [:elements (:currently-dragged-element-id dragged-values)]\n           (fn [cur-val]\n             (merge cur-val dragged-values))))\n  (swap! ui-state assoc :currently-dragged-element-id nil))\n\n\n\n(defn moveable-drag-start! [event]\n  (let [element-id (html-element->element-id (-> event .-target))\n        cur-element-info (get-in @threat-model [:elements element-id])]\n    (swap! ui-state\n           merge\n           {:currently-dragged-element-id element-id}\n           (select-keys cur-element-info [:x :y]))))\n\n(defn moveable-drag-on! [event]\n  (let [last-element-dragged-deref @ui-state\n        newX (+ (:x last-element-dragged-deref) (nth (-> event .-delta) 0))\n        newY (+ (:y last-element-dragged-deref) (nth (-> event .-delta) 1))\n        element-id (:currently-dragged-element-id last-element-dragged-deref)]\n    (swap! ui-state merge {:x newX :y newY})\n    (set! (-> event .-target .-style .-transform) (goog.string.format \"translate(%dpx,%dpx)\" newX newY))))\n\n\n(defn instructions []\n  [:div\n   [:p \"Controls\"\n    [:br]\n    \"Connect: Shift-click two elements to connect elements\"\n    [:br]\n    \"Delete: Move mouse over element and press backspace key\"]])\n\n(defn simple-example [threat-model]\n  [:div\n   [instructions]\n   [toolbar]\n   [:div#diagram \n    ;Doall is required here, as for generates lazy sequence, and \n    ;derefs in child components won't trigget updates. known reagent issue.\n    (doall (for [element (vals (:elements @threat-model))]\n             (render-threat-model-element element (:elements @threat-model))))\n    [moveable {:target (js/document.querySelector (str \".moveable-element-\" (-> @ui-state :active-moveable-id)))\n               :draggable true\n                                        ;Drag x and y in steps of 25 points\n               :throttleDrag 25 \n               :throttleDragRotate 0\n               :onDragStart moveable-drag-start!\n               :onDrag moveable-drag-on! \n               :snappable true\n               :onDragEnd moveable-drag-end!}]\n    [kb/keyboard-listener]\n    [kb/kb-action \"backspace\" handle-backspace-pressed! ]]])\n\n\n\n\n(defn ^:export main! [])\n\n(rdom/render [simple-example threat-model] (js/document.getElementById \"app\"))\n\n\n"]}