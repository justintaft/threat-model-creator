shadow$provide.module$node_modules$$egjs$list_differ$dist$list_differ=function(global$jscomp$0,require,module,exports){(function(global,factory){"object"===typeof exports&&"undefined"!==typeof module?module.exports=factory():"function"===typeof define&&define.amd?define(factory):(global=global||self,global.eg=global.eg||{},global.eg.ListDiffer=factory())})(this,function(){function orderChanged(changed,fixed){var fromLinks=[],toLinks=[];changed.forEach(function(_a){var from=_a[0];_a=_a[1];var link=
new Link;fromLinks[from]=link;toLinks[_a]=link});fromLinks.forEach(function(link,i){link.connect(fromLinks[i-1])});return changed.filter(function(_,i){return!fixed[i]}).map(function(_a,i){i=_a[0];var to=_a[1];if(i===to)return[0,0];_a=fromLinks[i];to=toLinks[to-1];i=_a.getIndex();_a.disconnect();to?_a.connect(to,to.next):_a.connect(void 0,fromLinks[0]);_a=_a.getIndex();return[i,_a]})}function diff(prevList,list,findKeyCallback){var mapClass=SUPPORT_MAP?Map:findKeyCallback?HashMap:PolyMap,callback=
findKeyCallback||function(e){return e},added=[],removed=[],maintained=[];findKeyCallback=prevList.map(callback);callback=list.map(callback);var prevKeyMap=new mapClass,keyMap=new mapClass,changedBeforeAdded=[],fixed=[],removedMap={},changed=[],addedCount=0,removedCount=0;findKeyCallback.forEach(function(key,prevListIndex){prevKeyMap.set(key,prevListIndex)});callback.forEach(function(key,listIndex){keyMap.set(key,listIndex)});findKeyCallback.forEach(function(key,prevListIndex){key=keyMap.get(key);
"undefined"===typeof key?(++removedCount,removed.push(prevListIndex)):removedMap[key]=removedCount});callback.forEach(function(key,listIndex){key=prevKeyMap.get(key);"undefined"===typeof key?(added.push(listIndex),++addedCount):(maintained.push([key,listIndex]),removedCount=removedMap[listIndex]||0,changedBeforeAdded.push([key-removedCount,listIndex-addedCount]),fixed.push(listIndex===key),key!==listIndex&&changed.push([key,listIndex]))});removed.reverse();return new Result(prevList,list,added,removed,
changed,maintained,changedBeforeAdded,fixed)}var PolyMap=function(){function PolyMap(){this.keys=[];this.values=[]}var __proto=PolyMap.prototype;__proto.get=function(key){return this.values[this.keys.indexOf(key)]};__proto.set=function(key,value){var keys=this.keys,values=this.values,prevIndex=keys.indexOf(key);prevIndex=-1===prevIndex?keys.length:prevIndex;keys[prevIndex]=key;values[prevIndex]=value};return PolyMap}(),HashMap=function(){function HashMap(){this.object={}}var __proto=HashMap.prototype;
__proto.get=function(key){return this.object[key]};__proto.set=function(key,value){this.object[key]=value};return HashMap}(),SUPPORT_MAP="function"===typeof Map,Link=function(){function Link(){}var __proto=Link.prototype;__proto.connect=function(prevLink,nextLink){this.prev=prevLink;this.next=nextLink;prevLink&&(prevLink.next=this);nextLink&&(nextLink.prev=this)};__proto.disconnect=function(){var prevLink=this.prev,nextLink=this.next;prevLink&&(prevLink.next=nextLink);nextLink&&(nextLink.prev=prevLink)};
__proto.getIndex=function(){for(var link=this,index=-1;link;)link=link.prev,++index;return index};return Link}(),Result=function(){function Result(prevList,list,added,removed,changed,maintained,changedBeforeAdded,fixed){this.prevList=prevList;this.list=list;this.added=added;this.removed=removed;this.changed=changed;this.maintained=maintained;this.changedBeforeAdded=changedBeforeAdded;this.fixed=fixed}var __proto=Result.prototype;Object.defineProperty(__proto,"ordered",{get:function(){this.cacheOrdered||
this.caculateOrdered();return this.cacheOrdered},enumerable:!0,configurable:!0});Object.defineProperty(__proto,"pureChanged",{get:function(){this.cachePureChanged||this.caculateOrdered();return this.cachePureChanged},enumerable:!0,configurable:!0});__proto.caculateOrdered=function(){var ordered=orderChanged(this.changedBeforeAdded,this.fixed),changed=this.changed,pureChanged=[];this.cacheOrdered=ordered.filter(function(_a,i){var _b=changed[i];i=_b[0];_b=_b[1];if(_a[0]!==_a[1])return pureChanged.push([i,
_b]),!0});this.cachePureChanged=pureChanged};return Result}(),ListDiffer=function(){function ListDiffer(list,findKeyCallback){void 0===list&&(list=[]);this.findKeyCallback=findKeyCallback;this.list=[].slice.call(list)}ListDiffer.prototype.update=function(list){list=[].slice.call(list);var result=diff(this.list,list,this.findKeyCallback);this.list=list;return result};return ListDiffer}();ListDiffer.diff=diff;return ListDiffer})}
//# sourceMappingURL=module$node_modules$$egjs$list_differ$dist$list_differ.js.map
